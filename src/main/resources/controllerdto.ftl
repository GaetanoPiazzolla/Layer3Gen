package ${config.outputPackages.controllers};

import ${entityPackage}.${entityClass};
import ${config.outputPackages.dtos}.${entityClass}DTO;
import ${config.outputPackages.services}.${entityClass}Service;
import ${config.outputPackages.mappers}.${entityClass}Mapper;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import java.util.Optional;

/**
* Generated by Springboot-3layer-Generator at ${dateGen?datetime}
*/
@RestController
@RequestMapping("/${entityClass?lower_case}-dto/")
public class ${entityClass}ControllerDTO implements CrudController<${entityClass}DTO,${primaryKeyClass}>{

    @Autowired
    private ${entityClass}Service service;

    @Autowired
    private ${entityClass}Mapper mapper;

    @Override
    public ResponseEntity<${entityClass}DTO> create(@RequestBody ${entityClass}DTO dto) {
       ${entityClass} entity = mapper.toEntity(dto);
       entity = service.create(entity);
       return ResponseEntity.ok(mapper.toDto(entity));
    }

    @Override
    public ResponseEntity<${entityClass}DTO> update(@RequestBody ${entityClass}DTO dto) {
      ${entityClass} entity = mapper.toEntity(dto);
       entity = service.update(entity);
       return ResponseEntity.ok(mapper.toDto(entity));
    }

    @Override
    public ResponseEntity<Page<${entityClass}DTO>> read(
            @RequestParam("page") Integer page,
            @RequestParam("size") Integer size) {
        Pageable pageable = PageRequest.of(page,size);
        Page<${entityClass}DTO> pages = service.read(pageable).map(mapper::toDto);
        return ResponseEntity.ok(pages);
    }

    @Override
    public ResponseEntity<${entityClass}DTO> readOne(@PathVariable("id") ${primaryKeyClass} primaryKey) {
         Optional<${entityClass}> entity = service.readOne(primaryKey);
         return entity.map(e -> ResponseEntity.ok(mapper.toDto(e))).orElseGet(() -> ResponseEntity.notFound().build());
    }

    @Override
    public void delete(${primaryKeyClass} primaryKey) {
        service.delete(primaryKey);
    }
}
